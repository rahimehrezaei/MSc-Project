# -*- coding: utf-8 -*-
"""Llama2-public health-whole

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0u3ukDID7ITuSPJZyG0nzreqWns5lyw
"""

!pip install --upgrade transformers

!pip install transformers torch accelerate
!huggingface-cli login
!huggingface-cli whoami

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, StoppingCriteria, StoppingCriteriaList
from accelerate import infer_auto_device_map, init_empty_weights, load_checkpoint_and_dispatch
import torch
import json

model_name = "meta-llama/Llama-2-7b-chat-hf"
HF_Token = "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"

# Load the Llama-2 model and tokenizer with the token
tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=HF_Token)
model = AutoModelForCausalLM.from_pretrained(model_name, use_auth_token=HF_Token)

# Initialize the pipeline
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

# Define the prompt for Argument from Definition

scheme = "Argument from similarity"
stance = "pro"
topic = "Should smoking be banned in public places to protect public health?"

argument_similarity = "Smoking in public places is similar to releasing toxic fumes because both expose people to harm. Therefore, if toxic fumes are restricted, smoking should also be banned to protect public health."


prompt = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_similarity}"
    "Answer: \n"
)
# Generate the argument
outputs = generator(prompt, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-similarity-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from Similarity",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-similarity-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Popular opinion**"""

# A: Smoking should be banned in public places.
#Scheme: Most people believe that A is true. Therefore, A is true.

argument_popular_opinion = "Most people believe that smoking should be banned in public places. Therefore, smoking should be banned in public places."


prompt11 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_popular_opinion}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt11, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-popular_opinion-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from popular_opinion",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-popular_opinion-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Equality**"""

#Form: "a is X, because b is X."

# a: Smoking in public places
# b: Smoking in workplaces
# X: Should be banned

argument_equality = "Smoking is banned in workplaces because it harms others. Therefore, smoking should also be banned in public places."

prompt10 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_equality}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt10, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-equality-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from equality",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-equality-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Cause of effect**"""

#Scheme: Event A causes Event B. A is occurring. Therefore, B will occur.
#A: Smoking is occurring in public places.
#B: Public health will be harmed.

argument_cause_effect = "Smoking in public places causes harm to public health. Smoking is occurring in public places. Therefore, public health will be harmed."

prompt9 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_cause_effect}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt9, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-cause_effect-publich-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from cause_effect",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-cause_effect-publich-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Consequences**"""

#Structure: "If action A is taken, consequence B will occur. Therefore, action A should (or should not) be taken."

#A: Smoking is banned in public places.
#B: Public health will improve.

argument_consequences = "If smoking is banned in public places, public health will improve. Therefore, smoking should be banned in public places."


prompt8 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_consequences}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt8, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-consequences-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from consequences",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-consequences-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Commitment**"""

# Scheme: Person P is committed to proposition A. Therefore, P should accept B (if B is a logical consequence of A).
#P: Society
#A: Society is committed to protecting public health.
#B: Society should ban smoking in public places.

argument_commitment = "Society is committed to protecting public health. Banning smoking in public places is necessary to protect public health. Therefore, society should ban smoking in public places."

prompt7 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_commitment}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt7, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-commitment-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from commitment",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-commitment-punlic-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Goal**"""

#Scheme: I have a goal G. Doing action A is a means to achieve G. Therefore, I should do A.
#G: Protect public health.
#A: Banning smoking in public places.

argument_goal = "The goal is to protect public health. Banning smoking in public places is a means to achieve this goal. Therefore, smoking should be banned in public places."

prompt6 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_goal}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt6, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-goal-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from goal",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-goal-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Example**"""

#Structure: "Example A supports claim B. Therefore, claim B is true."
#A: Banning smoking in New York City reduced secondhand smoke.
#B: Smoking should be banned in public places.

argument_example = "In New York City, banning smoking in public places led to a significant reduction in secondhand smoke exposure. Therefore, smoking should be banned in public places to protect public health."


prompt5 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_example}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt5, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-example-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from example",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-example-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Authority**"""

#Authority: Health experts agree
#Claim: Smoking should be banned in public places.
# Form: "q is T, because q is Z."

argument_authority = "Health experts agree that banning smoking in public places protects public health. Therefore, smoking should be banned in public places."


prompt4 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_authority}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt4, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-authority-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from authority",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-authority-public-health.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Criterion**"""

#Form: "a is X, because a is Y."

#Criterion (A): Protecting public health is essential.
#Conclusion (B): Smoking should be banned in public places.

argument_criterion = "Protecting public health is essential. Banning smoking in public places is necessary to protect public health. Therefore, smoking should be banned in public places."


prompt2 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_criterion}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt2, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-criterion-public-health.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from criterion",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-criterion-public-health.json", "w") as file:
    json.dump(data, file, indent=4)