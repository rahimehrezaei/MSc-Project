# -*- coding: utf-8 -*-
"""Llama2-Mental-health-final

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jC-ZuZmaSlPd6cj6Fmib2so_beHNDMft
"""

!pip install --upgrade transformers

!pip install transformers torch accelerate
!huggingface-cli login
!huggingface-cli whoami

from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline, StoppingCriteria, StoppingCriteriaList
from accelerate import infer_auto_device_map, init_empty_weights, load_checkpoint_and_dispatch
import torch
import json

model_name = "meta-llama/Llama-2-7b-chat-hf"
HF_Token = "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"

# Load the Llama-2 model and tokenizer with the token
tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=HF_Token)
model = AutoModelForCausalLM.from_pretrained(model_name, use_auth_token=HF_Token)

# Initialize the pipeline
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

# Define the prompt for Argument from Definition

scheme = "Argument from similarity"
stance = "pro"
topic = "Is it necessary for schools to provide mental health education to students?"

"""**Similarity**"""

argument_similarity = "Mental health education is like physical education because both support students' well-being. Therefore, schools should provide both."


prompt2 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_similarity}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt2, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-similarity-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from Similarity",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-similarity-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""

**Argument from criterion**"""

argument_criterion = "Mental health education is necessary because it helps students cope with stress."


prompt3 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_criterion}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt3, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-criterion-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from criterion",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-criterion-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Authority**"""

argument_authority = "Mental health education is essential because experts in child psychology say it is crucial for emotional development."

prompt4 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_authority}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt4, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-authority-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from authority",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-authority-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Example**"""

argument_example = "In Canada, schools with mental health education saw less student anxiety. Therefore, mental health education is necessary for schools."

prompt5 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_example}"
    "Answer: \n"
)


# Generate the argument
outputs = generator(prompt5, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-example-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from example",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-example-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Goal**"""

argument_goal = "The goal is to improve students' overall well-being. Providing mental health education in schools is a means to achieve this goal. Therefore, schools should provide mental health education."


prompt6 = (
    ff"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_goal}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt6, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-goal-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from goal",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-goal-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Commitment**"""

argument_commitment = "Schools are committed to ensuring the overall well-being of their students. Providing mental health education is a logical step to fulfill this commitment. Therefore, schools should provide mental health education."

prompt7 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_commitment}"
    "Answer: \n"
)
# Generate the argument
outputs = generator(prompt7, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-commitment-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from commitment",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-commitment-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Consequences**"""

argument_consequences = "If schools provide mental health education, students' emotional and psychological well-being will improve. Therefore, schools should provide mental health education."

prompt8 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_consequences}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt8, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-consequences-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from consequences",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-consequences-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Cause of effect**"""

argument_cause_effect = "Providing mental health education in schools improves students' mental health. Therefore, schools should continue this practice."

prompt9 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_cause_effect}"
    "Answer: \n"
)


# Generate the argument
outputs = generator(prompt9, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-cause_effect-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from cause_effect",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-cause_effect-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Equality**"""

argument_equality = "Mental health education is necessary for schools, because physical health education is necessary and both are essential for students' overall well-being."

prompt10 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_equality}"
    "Answer: \n"
)

# Generate the argument
outputs = generator(prompt10, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-equality-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from equality",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-equality-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)

"""**Popular Opinion**"""

argument_popular_opinion = "Most people believe that schools should provide mental health education to students. Therefore, it is necessary for schools to provide mental health education."

prompt11 = (
    f"Generate an argument using the {scheme} approach, focusing on a {stance} perspective for the topic {topic}."
    f"Ensure the argument supports a pro stance exclusively, without any opposing viewpoints."
    f"The argument should be structured according to this format: {argument_popular_opinion}"
    "Answer: \n"
)


# Generate the argument
outputs = generator(prompt11, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)

# Extract the generated text starting after "Answer:"
generated_text = outputs[0]["generated_text"]
argument_start = generated_text.split("Answer:")[1].strip()  # Get the text after "Answer:"

# Find the last complete sentence by locating the last period (".")
last_period_index = argument_start.rfind(".")
if last_period_index != -1:
    complete_argument = argument_start[:last_period_index + 1].strip()  # Keep text up to and including the last "."
else:
    complete_argument = argument_start  # In case there is no period, use the whole text

# Print the complete argument
print(complete_argument)

# Save the output to a text file
with open("Llama2-popular_opinion-mentalHealth.txt", "w") as file:
    file.write(complete_argument)

# Prepare the data to save as JSON
data = {
    "topic": topic,
    "argument_scheme": "Argument from popular_opinion",
    "generated_argument": complete_argument
}

# Save the output to a JSON file
with open("Llama2-popular_opinion-mentalHealth.json", "w") as file:
    json.dump(data, file, indent=4)