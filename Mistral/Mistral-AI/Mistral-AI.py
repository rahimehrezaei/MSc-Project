# -*- coding: utf-8 -*-
"""Mistral-whole

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mg14KcgPx83U070bRacveo86DOWKmo5Z
"""

!mistralai/Mistral-Nemo-Base-2407

!pip install git+https://github.com/huggingface/transformers.git

!pip install transformers
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
import json, os
from datetime import datetime

# Your Hugging Face token
HF_TOKEN = "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"

# Specify the model ID
model_id = "mistralai/Mistral-7B-v0.1"

# Load the Mistral model and tokenizer with the token
model_name = "Mistral-7B"  # Simplified model name for easy identification

tokenizer = AutoTokenizer.from_pretrained(model_id, use_auth_token=HF_TOKEN)
model = AutoModelForCausalLM.from_pretrained(model_id, use_auth_token=HF_TOKEN)

# Initialize the pipeline
generator = pipeline("text-generation", model=model, tokenizer=tokenizer)

"""**Ceriterion**"""

# Define the prompt for Argument from Definition
scheme = "Argument from criterion"
stance = "pro"
topic = "Should AI be used to make hiring and promotion decisions?"
argument_criterion = "AI is trustworthy, because it consistently produces unbiased decisions."

prompt = (
        f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_criterion}."

)

# Generate the argument
outputs = generator(prompt, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-criterion-AI.txt", "w") as file:
    file.write(generated_text)

"""**Similarity**"""

argument_similarity = "AI is similar to human decision-makers because both can make decisions based on data and patterns. Therefore, what is true for human decision-makers is likely true for AI in the context of hiring and promotion decisions."

prompt = (
    f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_similarity}."

)

# Generate the argument
outputs = generator(prompt, max_length=250, temperature=0.9, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-similarity-AI.txt", "w") as file:
    file.write(generated_text)

# Generate the argument
outputs = generator(prompt, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-similarity-AI.txt", "w") as file:
    file.write(generated_text)

"""**Correct similarity**"""

prompt2 = (
    f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_similarity}."
    F"Write a complete argument in 150 words. \n\n"
)

# Generate the argument
outputs = generator(prompt2, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-similarity-AI.txt", "w") as file:
    file.write(generated_text)

"""**Authority**"""

argument_authority = (
    "AI should be used to make hiring and promotion decisions because experts assert that AI reduces biases and improves decision-making accuracy. "
    "The credibility of these experts supports the use of AI as a reliable tool in these processes."
)
prompt3 = (
        f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_authority}."

)

# Generate the argument
outputs = generator(prompt3, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-authority-AI.txt", "w") as file:
    file.write(generated_text)

"""**Example**"""

argument_example = (
    "In a specific company, AI was implemented in the hiring process, resulting in more diverse and qualified candidates being hired. "
    "Thus, AI improves hiring decisions."
)
prompt4 = (
        f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_example}."

)

# Generate the argument
outputs = generator(prompt4, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-example-AI.txt", "w") as file:
    file.write(generated_text)

"""**Goal**"""

argument_goal = "I have a goal of achieving fairness. Implementing AI is a means to achieve fairness. Therefore, I should implement AI."

prompt5 = (
    f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_goal}."
    F"Write a complete argument in 150 words. \n\n"
)

# Generate the argument
outputs = generator(prompt5, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-goal-AI.txt", "w") as file:
    file.write(generated_text)

"""**Consequences**"""

argument_commitment = "The company is committed to fairness. Therefore, the company should implement AI (since implementing AI is a logical consequence of fairness)"
prompt6 = (
    f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_commitment}."
    F"Write a complete argument in 150 words. \n\n"
)

# Generate the argument
outputs = generator(prompt6, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-commitment-AI.txt", "w") as file:
    file.write(generated_text)

"""**Consequence**"""

argument_consequences = (
    "If AI is implemented, it will lead to more unbiased and efficient hiring processes. "
    "Therefore, AI should be implemented."
)

prompt7 = (
    f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_consequences}."
    F"Write a complete argument in 150 words. \n\n"
)

# Generate the argument
outputs = generator(prompt7, max_length=300, temperature=0.8, num_return_sequences=1, do_sample=True, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(generated_text)

# Save the output to a text file
with open("Mistral-consequence-AI.txt", "w") as file:
    file.write(generated_text)