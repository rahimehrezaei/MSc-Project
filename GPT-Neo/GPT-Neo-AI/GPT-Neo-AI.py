# -*- coding: utf-8 -*-
"""GPTNeo-Whole

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13IK-jJ6ve1Xl9k5HxHG7Ox3w-RHOmB72
"""

!pip install transformers

import torch  # Import torch for device management
import os, json
from datetime import datetime
from transformers import pipeline
from transformers import AutoModelForCausalLM, AutoTokenizer, StoppingCriteria, StoppingCriteriaList


# Your Hugging Face token
HF_Token = "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"

# Load the GPT-Neo model and tokenizer with the token
model_name = "GPT-Neo"  # Simplified model name for easy identification
full_model_name = "EleutherAI/gpt-neo-2.7B"  # Use the GPT-Neo 2.7B model

# Load the tokenizer and model
tokenizer = AutoTokenizer.from_pretrained(full_model_name, use_auth_token=HF_Token)
model = AutoModelForCausalLM.from_pretrained(full_model_name, use_auth_token=HF_Token)

# Load the pipeline
generator = pipeline('text-generation', model='EleutherAI/gpt-neo-2.7B')

"""**Criterion**"""

# Define the prompt for Argument from Definition
scheme = "Argument from criterion"
stance = "pro"
topic = "Should AI be used to make hiring and promotion decisions?"
argument_criterion = "AI is trustworthy, because it consistently produces unbiased decisions."


prompt3 = (

    
    f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_criterion}."

)

# Generate the argument
outputs = generator(prompt3, max_length=250, temperature=0.8, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(outputs[0]["generated_text"])

"""**Authority**"""

argument_authority = (
    "AI should be used to make hiring and promotion decisions because experts assert that AI reduces biases and improves decision-making accuracy. "
    "The credibility of these experts supports the use of AI as a reliable tool in these processes."
)

prompt4 = (

        f"Generate an argument from a {stance} point of view in response to {topic}. The argument should adhere to the following structure: {argument_authority}."


)

# Generate the argument
outputs = generator(prompt4, max_length=250, temperature=0.9, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(outputs[0]["generated_text"])

"""**consequnnces**"""

argument_consequences = "If AI is implemented, it will lead to more unbiased and efficient hiring processes. Therefore, AI should be implemented."

A = "AI"
B = "more unbiased and efficient hiring processes"
prompt5 = (

    f"question: {topic}"
    f"answer using the following scheme:"
    f"scheme: If {A} is implemented, it will lead to {B}. Therefore, {A} should be implemented."
    f"Your answer should exclusively focus on the positive perspective, explaining why {A} should be implemented and how it benefits the hiring and promotion processes."



)

# Generate the argument
outputs = generator(prompt5, max_length=300, temperature=0.9, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(outputs[0]["generated_text"])

# Generate the argument
outputs = generator(prompt5, max_length=300, temperature=0.9, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(outputs[0]["generated_text"])

"""**Commitment**"""

argument_commitment = "The company is committed to fairness. Therefore, the company should implement AI (since implementing AI is a logical consequence of fairness)"

prompt6 = (
    f"Create an argument with a positive perspective on the topic of '{topic}'.\n"
    f"Use the following scheme to construct your argument: {argument_commitment}\n"
    f"Your argument should emphasize why the company's commitment to fairness logically leads to the implementation of AI."
)

# Generate the argument
outputs = generator(prompt6, max_length=250, temperature=0.9, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(outputs[0]["generated_text"])

G = "achieving fairness"
C= "Implementing AI"

argument_goal = (
    "I have a goal of achieving fairness. "
    "Implementing AI is a means to achieve fairness. "
    "Therefore, I should implement AI."
)
prompt7 = (
    f"Generate a persuasive argument on the topic '{topic}' using the following scheme:\n\n"
    f"I have a goal of {G}. {C} is a means to {G}. Therefore, I should {C}.\n\n"
    f"The argument should exclusively focus on the positive perspective, explaining how implementing AI will help achieve the goal of fairness."
)

# Generate the argument
outputs = generator(prompt7, max_length=250, temperature=0.9, truncation=True)
generated_text = outputs[0]["generated_text"]

# Print the output
print(outputs[0]["generated_text"])

"""**Similarity**"""

argument_similarity = "AI is similar to human decision-makers because both can make decisions based on data and patterns. Therefore, what is true for human decision-makers is likely true for AI in the context of hiring and promotion decisions."